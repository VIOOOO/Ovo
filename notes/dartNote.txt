dart 学习笔记

class

	1、static :静态属性和方法可以直接用类名字加属性或者方法访问。
		动态方法可以调用静态和非静态成员，静态只能访问静态成员。
		
	2、对象操作符：
		？	- 条件运算；若前面的条件不成立，则不会继续访问后面的成员属性。
		as	- 类型转换：使用 as 操作符可以把对象转换为特定的类型。
		is	- 类型判断
		..	- 级联操作（连缀）
		


面向对象三大特性：封装、继承、多态

	1、类的继承：
		1.1 子类使用 dxttends 关键词来继承父类，并可使用 super 关键字调用一个父类方法。
		1.2 子类会继承父类里面可见的属性和方法，但不会继承构造函数。
		1.3 子类型能复写父类型的方法 getter 和 setter。
		
		
	2、抽象类：主要用于定义标准，子类可以继承抽象类，也可以实现抽象类接口。
		2.1 抽象类通过 abstract 关键字来定义。
		2.1 抽象方法不能用 abstract 声明，Dart 中没有方法体的方法称为抽象方法。
		2.3 如果自雷继承抽象类必须得实现里面的抽象方法。
		2.4 如果把抽象类当做接口实现的话必须得实现抽象类里面定义的所有属性和方法。
		2.5 抽象类不能被实例化，只有继承他的子类可以。
			
	
	3、多态：
		3.1 允许将子类型的指针赋值给父类型的指针，同一个函数调用会有不不同的执行效果。
		3.2 子类的实例赋值给父类。只能调父类里面的方法
		3.3 多态就是父类定义一个方法不去实现，让继承他的子类去实现，每个子类有不同的表现。
		
		
	4、接口：
		4.1 dart 接口没有 interface 关键字定义接口，而是普通类火灾抽象类都可以作为接口被实现。
		4.2 同样适用 implements 关键字实现。
		4.3 如果实现的类型是普通类，会将普通类和抽象中的属性好方法全部需要复写一遍。
			因抽象类可以定义抽象方法，普通类不可以。所以一般像 Java 接口那样 使用抽象类定义接口。
			
			
	5 extends 和 implements 的区别：
		1) 如果要复用抽象类里面的方法，并且要抽象方法约束自类的话我们就用 extends 类型继承抽象类。
		2) 如果只是把抽象类当做标准的话，我们就用 implements 实现抽象类。
		
		
	6、mixin 在类中混入其他功能
		6.1 在 Dart 中可以适用 mixin 实现类似多继承的功能。
		6.2 minxin 适用条件
			1) 作为 mixin 的类只能继承自 Object ，不能继承其他类。
			2) 作为 mixin 的类不能有构造函数。
			3) 一个类可以 mixin 多个 mixin 类。
			4) mixin 绝不是继承，也不是接口，而是一种全新的特性。
			


泛型：
	泛型就是解决 类、接口、方法的复用性，以及对不特定数据类型的支持（类型校验） 
	
	泛型接口：
		1、实现数据缓存的功能：有文件缓存和内存缓存。内存缓存和文件缓存按照接口约束实现。
		2、定义一个泛型接口，约束实现它的子类，必须有 getByKey(key) 和 setByKey(key,value)
		3、要求 setByKey 的时候，value 的类型和实例化子类的时候制定的类型一致。
		
			
	
			
			

			


			
			
			
	