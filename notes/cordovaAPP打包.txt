Cordova 打包 Android release app 过程详解：
	文档地址：https://segmentfault.com/a/1190000005177715
	
	另一个文档：cordova+vue 项目打包成Android（apk）应用   https://www.cnblogs.com/qirui/p/8421372.html

	
官网
	https://cordova.apache.org/
中文手册
	http://www.dba.cn/book/cordova/CORDOVAJiaoCheng/CORDOVAHuanJingPeiZhi.html

环境需要：
	cordova、NodeJS、npm、android studio、git
	
环境变量配置：
	下载旧版本 1.8 足够不需要太高版本
	java jdk：https://www.cnblogs.com/renqiqiang/p/6822143.html
	java sdk
	
	安装 android studio
	下载 SDK Mangager 对应  Android target 版本 java jdk 1.8对应 android 27
	配置 adk、jdk 路径：https://blog.csdn.net/qq_26650589/article/details/53886117
	
安装配置好之后根据 cordova 官网教程 创建项目、打包、运行


Cordova 打包 Android release app 过程详解

TL;DR

Android app 的打包分为 debug 和 release 两种，后者是用来发布到应用商店的版本。这篇文章会告诉你 Cordova 如何打包 Android release 版本，也会让你了解 Android app 的打包流程。




# 创建一个 demo app

为了演示，首先我们需要创建一个 Cordova 项目的基本步骤。如果你已经对此很熟悉，可以跳过这一步。

# 先全局安装 Cordova CLI ：

$ npm install -g cordova
	// 全局安装 cordova
	
	$cordova -v 
		// 检查是否正确安装 ，正确安装会显示版本号
		
$ cordova create cordova-demo com.example.cordovaDemo cordovaDemo
	// 在 cordova-demo 目录创建一个项目，ID 为 com.example.cordovaDemo ，项目名为 cordovaDemo 。 
	// 参数：
		// cordova-demo：目录名称
		// com.example.cordovaDemo：包名 ID 必须看起来像：`com.company.name`
		// cordovaDemo：项目名安装显示APP名字（在config.xml中查看）
	
	// 生成的cordova文件中
	
	// config.xml -包含应用相关信息，使用到的插件以及面向的平台
	// platforms – 包含应用运行平台如 Android 和 iOS 上对应的 Cordova 库
	// plugins – 包含应用所需插件的 Cordova 库，使得应用能够访问例如照相机和电池状态相关的事项。
	// www – 包含应用源代码，例如 HTML, JavaScript 和 CSS 文件
	// hooks – 包含为个性化应用编译系统所需的脚本


$ cordova platform add android 
	// 生成Android平台的cordova库，这时platforms文件夹中会生成一个android文件夹。
	
	$ cordova platform add ios
	// 添加 ios 平台

$ cordova platform remove android
$ cordova platform remove ios
	// 删除平台支持
	
$ cordova platform ls
	// 检查你当前平台设置状况:

$ cordova requirements
	// 调试打包apk软件前，检查androidsdk是否正确安装。基本上 Cordova 需要你把 Java SDK， Android SDK 和 Gradle 都配置好。
	
$ cordova run android
	// 在cordova主目录下，联调android软件（需连接真机或者模拟器）

	
# 构建 apk  未有签名的debug版
$ cordova build android
	// 构建 app 版本 编译完成后会输出 apk 文件的所在地址
	

# 查看一下这个目录，你应该会看到 android-debug-unsigned.apk
$ ls android-apk
	// 搞定！但这个构建的 APK 是 debug 版本的。
	// 要构建 release 版本，我们需要先了解一下 Android 手动打包的流程。
	 

	 
# 添加插件
$ cordova plugin add <插件名>

	$ cordova plugin add cordova-plugin-device
	// 获取设备信息
	
	$ cordova plugin add cordova-plugin-inappbrowser
		// 打开应用程序内浏览器窗口。
		
	$ cordova plugin add cordova-plugin-themeablebrowser
		// 打开自定义浏览器窗口
		
	$ cordova plugin add cordova-plugin-splashscreen
		// 控制应用程序的启动画面
		
	$ cordova plugin add cordova-plugin-networkinterface
		// 网络接口信息插件
		
	$ cordova plugin add https://github.com/SandLZ/cordova-hot-code-push.git
		// 安装热更新带有进度条的插件
		// 此插件有 bug 后面会说明遇到的情况
		
		// $ cordova plugin add cordova-hot-code-push-plugin
		// 该插件没有进度条所以使用其他人fork 过的
	 
	 // 安装插件后在 config.xml 文件可以查看到安装的插件, 如果没有插件可以手动引入 例如：
    <plugin name="cordova-plugin-inappbrowser" spec="^2.0.2" />
    <plugin name="cordova-plugin-themeablebrowser" spec="^0.2.17" />
    <plugin name="cordova-plugin-code-push" spec="^1.11.7" />
    <plugin name="cordova-plugin-console" spec="^1.1.0" />
    <plugin name="cordova-plugin-splashscreen" spec="^5.0.2" />
    <plugin name="onesignal-cordova-plugin" spec="^2.1.2" />
    <plugin name="cordova-plugin-file" spec="^4.3.3" />
    <plugin name="cordova-plugin-file-transfer" spec="^1.6.3" />
    <plugin name="cordova-plugin-zip" spec="^3.1.0" />
    <engine name="android" spec="^6.2.3" />
    
	 
# 删除插件
$ cordova plugin rm  <插件名>
	 
	 
# 更新cordova：
$ npm update -g cordova
	 
# 更新项目：
$ cordova platform update android
	 
	 
Android APK 手动打包流程


Android app 的打包流程大致分为 build , sign , align 三部分。

build是构建 APK 的过程，分为 debug 和 release 两种。release 是发布到应用商店的版本。

sign是为 APK 签名。不管是哪一种 APK 都必须经过数字签名后才能安装到设备上，签名需要对应的证书（keystore），大部分情况下 APK 都采用的自签名证书，就是自己生成证书然后给应用签名。

align是压缩和优化的步骤，优化后会减少 app 运行时的内存开销。

debug 版本的的打包过程一般由开发工具（比如 Android Studio）自动完成的。开发工具在构建时会自动生成证书然后签名，不需要我们操心。而 release 版本则需要开发者自己生成证书文件。Cordova 作为 hybrid app 的框架不像纯 Android 开发那么自动化，所以第一次打 release 包我们需要了解一下手动打包的过程。

# Sign 
# APK 签名
	// APK都必须经过数字签名后才能安装到设备上，签名需要对应的证书（keystore），大部分情况下 APK 都采用的自签名证书，就是自己生成证书然后给应用签名。
	// 数字签名证书是给APK打包所必需的文件，所以我们先要把数字签名证书生成。

$ keytool -genkey -v -keystore D:\mytest.keystore -alias mytest -keyalg RSA -validity 20000
	// 生成证书
	// -keystore D:/mytest.keystore表示生成的证书及其存放路径，如果直接写文件名则默认生成在用户当前目录下；
　// -alias mytest 表示证书的别名是mytest,不写这一项的话证书名字默认是mykey；
　// -keyalg RSA 表示采用的RSA算法；
　// -validity 20000表示证书的有效期是20000天

	// 根据指令输入密钥库口令，是不可见的。依次输入下面的问题。最后到【否】那里时输入y
	// 再输入密钥口令（可以与密钥库口令相同），如果相同，直接回车，记住这两个口令，后面签名会使用到。
	// 这时便会生成一个文件mytest.keystore，就是我们需要的签名文件。
	
	
# Build  打包带有签名 apk

方法一：（先生成未签名的 apk 再加入证书）
$ cordova build android --release
	// 先生成未签名的debug版本的apk app-release-unsigned.apk。

$ jarsigner -verbose -sigalg SHA1withRSA -digestalg SHA1 -keystore mytest.keystore app-release-unsigned.apk mytest
	// 把数字签名放到生成的未签名的apk所在的目录下，再输入命令
	// 这时的apk就会是一个已经签名的apk了，修改一下名字即可直接放到设备上安装。

方法二：（直接生成带签名的 apk）
$ cordova build android --release --keystore="mytest.keystore" --alias=mytest --storePassword=testing --password=testing1
	// 有了数字签名之后,数字签名需要放在cordova项目根目录下或者可以修改下面指令的keystore里的路径可以直接在cordova build中指定所有参数来快速打包，这会直接生成一个带有签名的 android-release.apk
	// keystore 后面是数字签名证书
	// –alias 后面是别名 
	// storePassword 后面是密钥库口令 
	// password 后面是密钥口令
	// 注意：命令中口令要替换成自己的，就是生成签名是需要记住的那两个口令
	
	
	
# Align 压缩和优化

	最后我们要用 zipalign 压缩和优化 APK ：

$ zipalign -v 4 android-apk/android-release-unsigned.apk android-apk/cordova-demo.apk
	// 这一步会生成最终的 APK，我们把它命名为 cordova-demo.apk 。它就是可以直接上传到应用商店的版本。

	
	
# 自动打包 方法1

	//一旦有了 keystore 文件，下次打包就可以很快了。你可以在 cordova build 中指定所有参数来快速打包。这会直接生成一个 android-release.apk 给你。
	
	// 每次打包输入命令行参数是很重复的，Cordova 允许我们建立一个 build.json 配置文件来简化操作。
	// 在cordova根目录新建文本文档，改名为build.json。

 新建文件 build.json 并配置内容：
{
  "android": {
    "release": {
      "keystore": "mytest.keystore",
      "alias": "mytest",
      "storePassword": "testing",
      "password": "testing2"
    }
  }
}

	// 为了安全性考虑，建议不要把密码放在在配置文件或者命令行中，而是手动输入。你可以把密码相关的配置去掉，下次 build 过程中会弹出一个 Java 小窗口，提示你输入密码。

$ cordova build –release
	// 可以直接生成带签名的 apk




# 自动打包 方法2
# 用 Gradle 配置自动打包（没测试通过）

另一种配置方法是使用 Gradle ，一个 Android 的自动化构建工具。 cordova build android 的过程其实就是使用它。你要在 platforms/android 目录下建立 release-signing.properties 文件，内容类似下面这样：

storeFile=relative/path/to/keystore
storePassword=SECRET1
keyAlias=ALIAS_NAME
keyPassword=SECRET2
这个文件的名称和位置也是可以通过 Gradle 的配置 cdvReleaseSigningPropertiesFile 修改的。我觉得一般情况使用 build.json 就足够了。有兴趣的可以看这个 Cordova 官方教程




	
	
# 自动化打包
	// 每次打包输入命令行参数是很重复的，Cordova 允许我们建立一个 build.json 配置文件来简化操作。
	// 在cordova根目录新建文本文档，改名为build.json。
	
	
	
	
# 热更新 使用插件 cordova-plugin-code-push
文档1（热更新实践）：https://blog.csdn.net/Gekkoou/article/details/89424947
文档2（简书）：https://www.jianshu.com/p/104eedf4529c
文档3（codepush使用记录）：https://segmentfault.com/a/1190000008591456
git 地址：https://github.com/Microsoft/cordova-plugin-code-push


1r、安装连接热更新服务端的工具

注:code-push-cli是连接热更新服务端的工具,我们把要更新的代码上传至服务端,客户端(我们的app)安装cordova-plugin-code-push插件来从服务端下载代码.

$ npm install -g code-push-cli
	// 全局安装插件
	
	$ cordova plugin add cordova-plugin-code-push
		// cordova 项目内也要安装插件
	
$ code-push register
	// 创建一个 CodePush 的云账户
	// 浏览器会自动打开窗口进行注册, 可用 github 帐号登录, 登录认证完毕会给一个key, 在把这个 key 粘贴到刚才命令行中, 回车注册完毕
	
$ code-push app add <appName> <os> <platform>
	// 创建 CodePush 应用
	// 参数说明：
		// appName：app 名称
		// os：系统
		// platform：所在平台
	
		// 例：
		// $ code-push app add test android cordova
		// 在 cordova 创建一个 android 名为 test app
		
	//创建后生成对应 key,：
	// Production key：生产环境key
	// Staging key： 开发环境key
	
	$ code-push deployment ls <appName> -k 
	//*忘记生成的 Key 的话可执行命令查看
	

	
		
2r、完成上述事情后：创建cordova 项目

$ npm install -g cordova
	// 安装 cordova
	
$ cordova create helloworld com.example.hello HelloWorld
	// 创建项目
	// 参数说明：
		// helloworld: 项目文件夹名
		// com.example.hello: 项目包名
		// HelloWorld: 项目名

$ cd helloworld
$ cordova platform add android
	// 进入项目添加平台
	
$ cordova plugin add cordova-plugin-code-push@latest
$ cordova plugin add cordova-plugin-whitelist
	// 添加插件
	
	
3r、修改 config.xml 文件内容：

<platform name="android">
    <preference name="CodePushDeploymentKey" value="********** Staging key or Production key *************" />
</platform>
	// 添加 codepush 生成的 key
	
<access origin="*" />
	// 允许与CodePush服务器通信
	或者：
	<access origin="https://codepush.azurewebsites.net" />
	<access origin="https://codepush.blob.core.windows.net" />
	<access origin="https://codepushupdates.azureedge.net" />


4r、修改 www/index.html, 添加 meta

<meta http-equiv="Content-Security-Policy" content="default-src https://codepush.azurewebsites.net 'self' data: gap: https://ssl.gstatic.com 'unsafe-eval'; style-src 'self' 'unsafe-inline'; media-src *" />

	// 注：修改 www/js/index.js (js具体使用方法参考文档: https://github.com/Microsoft/cordova-plugin-code-push)



5r、发布更新

$ code-push release-cordova <appName> android -d "Staging" --des "描述"
	// 参数说明：
	--deploymentName, -d			指定部署的类型, 默认"Staging", 可以选择"Production"
    --description, --des        		添加描述
    --disabled, -x             				指定是否应立即下载此版本
    --mandatory, -m             		指定此版本是否为强制更新版本
    --targetBinaryVersion, -t  		指定需要更新的版本号, 如果省略, 则用 config.xml 里的版本号 (例如 1.1.0, ~1.2.3)

案例参考
    $ code-push release-cordova <appName> android --des "描述"
    // 例1: 发布android应用更新
    
    $ code-push release-cordova <appName> android -d "Production" --des "描述"
    // 例2: 部署android应用生产环境"Production"的热更新
    
    $ code-push release-cordova <appName> ios -m --des "描述"
	$ code-push release-cordova <appName> android  -m --des "描述"
	    // 例3: 部署ios、android应用的强制更新 
		// -m参数强制更新
    
    $ code-push release-cordova <appName> android --des "描述" -t ~1.2.3
	// 例4: 版本号>=1.2.3和<1.3.0的android应用更新

	
	
6r、查看发布状态

$ code-push deployment ls <appName>
	// 例
	// $ code-push deployment ls test



7r、命令汇总

$ code-push app add <appName> <os> <platform>
	// 给app在热更新服务器上创建应用
	// 例: code-push app add <appName> android cordova

$ code-push app rm <appName>
	// 删除应用

$ code-push app list
	// 查看热更新服务器上有哪些应用

$ code-push deployment add <appName> <deploymentName>
	//添加部署状态,默认只有"Staging"和"Production"两中状态
	
$ code-push deployment ls <appName>
	// 查看部署状态

$ code-push deployment ls <appName> -k
	// 查看部署状态及key值

$ code-push deployment clear <appName> <deploymentName>
	// 清空部署记录
	// 例: 清空Staging状态的部署记录
	// $ code-push deployment clear <appName> Staging

$ code-push deployment rm <appName> <deploymentName>
	// 删除自定义的部署状态
	
	



