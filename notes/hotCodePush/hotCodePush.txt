
# 方法一：cordova 增量式热更新
 热更新插件：cordova-hot-code-push-plugin

# 创建 cordova 项目

$ cordova create testcoco com.coco.ccid testdjapp
	// 新建 cordova 项目
	
$ cordova platform add android 
	// 添加平台



# 安装相关插件

$ cordova plugin add cordova-plugin-device
	// 获取设备信息
	
$ cordova plugin add cordova-plugin-inappbrowser
	// 打开应用程序内浏览器窗口。
	
$ cordova plugin add cordova-plugin-app-version
	//安装版本
	
$ cordova plugin add cordova-plugin-splashscreen
	// 控制应用程序的启动画面
	
$ cordova plugin add cordova-plugin-themeablebrowser
	// 打开自定义浏览器窗口 控制横竖屏
	// 注：自定义修改了部分内容 可以直接替换在
	// 根目录/platforms/android/app/src/main/java/com/initialxy/cordova/themeablebrowser 修改后的插件4个文件
	
// $ cordova plugin add cordova-plugin-networkinterface
	// 网络接口信息插件
	
$ cordova plugin add https://github.com/SandLZ/cordova-hot-code-push.git
	// 安装热更新带有进度条的插件
	// 此插件有 bug 后面会说明遇到的情况
	
	// $ cordova plugin add cordova-hot-code-push-plugin
	// 该插件没有进度条所以使用其他人fork 过的
	
	
# 安装项目后在 config.xml 文件内引入相关使用插件
	<plugin name="cordova-plugin-inappbrowser" spec="^2.0.2" />
    <plugin name="cordova-plugin-splashscreen" spec="^5.0.2" />
    <plugin name="cordova-plugin-device" spec="^2.0.2" />
	<plugin name="cordova-plugin-app-version" spec="^0.1.9" />
	<plugin name="cordova-plugin-networkinterface" spec="^2.0.0" />
	// <plugin name="cordova-plugin-themeablebrowser" spec="^0.2.17" />
	

	
	
 $ npm install -g cordova-hot-code-push-cli
	// 打开cli，为了生成两个配置文件chcp.json和chcp.manifest，用于检测更新
	


$ cordova-hcp build
	/ / 生成热更新对比文件
	// www文件夹中会出现两个文件 chcp.json和chcp.manifest
	// chcp.manifest 为文件的名称与hash值的集合，用于检测哪些文件需要更新
	// 该文件在每次执行cordova-hcp build 都会更新，为了不用每次更改chcp.json的内容，可以在项目根目录下创建一个cordova-hcp.json文件

	 chcp.json格式为：
	 {
		// 自动在native(iOS/Android)下生成文件链接标签
		 "autogenerated": true,
		 //更新远程库路径
		 "content_url": "http://xxxxx.com",    
		 //更新模式 start:启动更新   resume：后台切换回来更新  now:web内容下载完毕即安装更新
		 "update": "start",　　　　　　         
		 "release": "2017.12.16-11.29.38"
	 }
	
	
	
	
# 在根目录创建cordova-hcp.json文件并写入内容
		// $ cordova-hcp init
		// 也可以使用 命令配置
		// 以后每次执行cordova-hcp build时，会将cordova-hcp.json的内容更新到chcp.json中，省去每次都要修改的麻烦；
		// 注意：该文件不能有注释
		
	写入内容：
	{
		  // 自动在native(iOS/Android)下生成文件链接标签
		  "autogenerated": true,
		  // 项目名称(自行替换)
		  "name": "com.coco.ccid",
		  // 更新的方式,有三个选项:start(app启动时安装更新，默认值)、now(app从后台切换过来的时候安装更新)、resume(web内容下载完毕即安装更新)
		  "update": "now",
		  // 项目在服务器上面的地址(这里使用了笔者本地的服务器地址,自行替换)
		  "content_url": "http://localhost/cordova/www"
	}
	
	// 以后每次执行cordova-hcp build时，会将cordova-hcp.json的内容更新到chcp.json中
	
	
	$ cordova-hcp server
	// 建立本地服务
	//  .chcpenv文件就出来了；
	// 此时在项目根目录下会生成一个.chcpenv的文件，此文件用户配置远程服务器，内容如下：
		{
		  "content_url": "http://xxxxx.com",　　　　　　 // 用于获取文件
		  "config_url": "http://xxxxx.com/chcp.json"  		 // 用于访问远程服务器配置文件
		}
	
	
	
# 根目录的config.xml文件，添加如下内容，指定客服端需要从哪请求最新的chcp.json配置文件，这里我们指定为www目录文件提交的服务器地址：
	// 还有根目录的.chcpenv文件,  "config_url" 把路径改为一致:

<chcp>
    <auto-download enabled="false" />
    <auto-install enabled="false" />
    <config-file url="111.222.333.444:33333/www/chcp.json" />
</chcp>

	// 参数说明：
	// auto-download：取消自动下载
	// auto-install：取消自动安装
	// config-file：为更新文件服务器地址，如果是本地建立的服务器则写入 当前电脑IP



			
			
			
			
# 初步设置完成 生成APK

$ cordova-hcp build
	// 生成热更新文件

$ cordova build android
	// 生成 APK
	




#遇到的坑

	1、热更新后发现，若发代码有问题的版本更新后，APP 会无法回滚，需要卸载重新安装APP，上产时候会出现不可逆的损失。
	解决办法：建测试APP 更新没问题再推正式环境
	2、本地做服务器热更新时候是可以正常更新的，但是部署到CDN上面时候，就会出现报错，重复的循环加载更新，不会出现回滚情况，卡在启动页更新。
	解决办法：
		内存溢出导致问题出现
		修改D:\test\testcoco\platforms\android\app\src\main\java\com\nordnetab\chcp\main\network\FileDownloader.java

		downloadOneByOne(files, contentFolderUrl, downloadFolder, requestHeaders, 0);
		修改为：
		for(int i=0;i<files.size();i++) {
			downloadOneByOne(files, contentFolderUrl, downloadFolder, requestHeaders, i);
		}
		
		并注释
		// downloadOneByOne(files, contentFolderUrl, downloadFolder, requestHeaders, index);
		
	
	2、项目内使用的插件 cordova-plugin-themeablebrowser 出现不能控制显示窗口横竖屏
		解决办法： 将项目内的文件 路径：替换四个文件
			根目录/platforms/android/app/src/main/java/com/initialxy/cordova/themeablebrowser 
	
	
	
	
	
# 方法二：热更新 
	使用插件 cordova-plugin-code-push
	文档1（热更新实践）：https://blog.csdn.net/Gekkoou/article/details/89424947
	文档2（简书）：https://www.jianshu.com/p/104eedf4529c
	文档3（codepush使用记录）：https://segmentfault.com/a/1190000008591456
	git 地址：https://github.com/Microsoft/cordova-plugin-code-push


1r、安装连接热更新服务端的工具

注:code-push-cli是连接热更新服务端的工具,我们把要更新的代码上传至服务端,客户端(我们的app)安装cordova-plugin-code-push插件来从服务端下载代码.

$ npm install -g code-push-cli
	// 全局安装插件
	
	$ cordova plugin add cordova-plugin-code-push
		// cordova 项目内也要安装插件
		
	$ cordova plugin add cordova-plugin-file
	$ cordova plugin add cordova-plugin-file-transfer
		// 文件传输描述：上传和下载文件
		// 热更新插件需要安装该插件
	
$ code-push register
	// 创建一个 CodePush 的云账户
	// 浏览器会自动打开窗口进行注册, 可用 github 帐号登录, 登录认证完毕会给一个key, 在把这个 key 粘贴到刚才命令行中, 回车注册完毕
	
$ code-push app add <appName> <os> <platform>
	// 创建 CodePush 应用
	// 参数说明：
		// appName：app 名称
		// os：系统
		// platform：所在平台
	
		// 例：
		// $ code-push app add test android cordova
		// 在 cordova 创建一个 android 名为 test app
		
	//创建后生成对应 key,：
	// Production key：生产环境key
	// Staging key： 开发环境key
	
	$ code-push deployment ls <appName> -k 
	//*忘记生成的 Key 的话可执行命令查看
	

	
		
2r、完成上述事情后：创建cordova 项目

$ npm install -g cordova
	// 安装 cordova
	
$ cordova create helloworld com.example.hello HelloWorld
	// 创建项目
	// 参数说明：
		// helloworld: 项目文件夹名
		// com.example.hello: 项目包名
		// HelloWorld: 项目名

$ cd helloworld
$ cordova platform add android
	// 进入项目添加平台
	
$ cordova plugin add cordova-plugin-code-push@latest
$ cordova plugin add cordova-plugin-whitelist
	// 添加插件
	
	
3r、修改 config.xml 文件内容：

<platform name="android">
    <preference name="CodePushDeploymentKey" value="********** Staging key or Production key *************" />
</platform>
	// 添加 codepush 生成的 key
	
<access origin="*" />
	// 允许与CodePush服务器通信
	或者：
	<access origin="https://codepush.azurewebsites.net" />
	<access origin="https://codepush.blob.core.windows.net" />
	<access origin="https://codepushupdates.azureedge.net" />


4r、修改 www/index.html, 添加 meta

<meta http-equiv="Content-Security-Policy" content="default-src https://codepush.azurewebsites.net 'self' data: gap: https://ssl.gstatic.com 'unsafe-eval'; style-src 'self' 'unsafe-inline'; media-src *" />

	// 注：修改 www/js/index.js (js具体使用方法参考文档: https://github.com/Microsoft/cordova-plugin-code-push)



5r、发布更新

$ code-push release-cordova <appName> android -d "Staging" --des "描述"
	// 参数说明：
	--deploymentName, -d			指定部署的类型, 默认"Staging", 可以选择"Production"
    --description, --des        		添加描述
    --disabled, -x             				指定是否应立即下载此版本
    --mandatory, -m             		指定此版本是否为强制更新版本
    --targetBinaryVersion, -t  		指定需要更新的版本号, 如果省略, 则用 config.xml 里的版本号 (例如 1.1.0, ~1.2.3)

案例参考
    $ code-push release-cordova <appName> android --des "描述"
    // 例1: 发布android应用更新
    
    $ code-push release-cordova <appName> android -d "Production" --des "描述"
    // 例2: 部署android应用生产环境"Production"的热更新
    
    $ code-push release-cordova <appName> ios -m --des "描述"
	$ code-push release-cordova <appName> android  -m --des "描述"
	    // 例3: 部署ios、android应用的强制更新 
		// -m参数强制更新
    
    $ code-push release-cordova <appName> android --des "描述" -t ~1.2.3
	// 例4: 版本号>=1.2.3和<1.3.0的android应用更新

	
	
6r、查看发布状态

$ code-push deployment ls <appName>
	// 例
	// $ code-push deployment ls test



7r、命令汇总

$ code-push app add <appName> <os> <platform>
	// 给app在热更新服务器上创建应用
	// 例: code-push app add <appName> android cordova

$ code-push app rm <appName>
	// 删除应用

$ code-push app list
	// 查看热更新服务器上有哪些应用

$ code-push deployment add <appName> <deploymentName>
	//添加部署状态,默认只有"Staging"和"Production"两中状态
	
$ code-push deployment ls <appName>
	// 查看部署状态

$ code-push deployment ls <appName> -k
	// 查看部署状态及key值

$ code-push deployment clear <appName> <deploymentName>
	// 清空部署记录
	// 例: 清空Staging状态的部署记录
	// $ code-push deployment clear <appName> Staging

$ code-push deployment rm <appName> <deploymentName>
	// 删除自定义的部署状态
	
	


# 遇到的坑
	该方法每次发版前 VUE 编译打包生成的 hash 值会有一些空格 ，与服务器上的值不一样，代码推送后 APP 会无法安装成功，版本大量回滚出现重复更新的情况
	
	


	
	
	